using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using BUS;
using System.Threading;
using Microsoft.Office.Interop.Excel;

namespace QLDaiLy
{
    public partial class frmDaiLy : DevExpress.XtraEditors.XtraForm
    {
        DAL.QLDaiLyEntities db = new DAL.QLDaiLyEntities();

        public frmDaiLy()
        {
            InitializeComponent();
        }


        private void navbarThem_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            frmThemDaiLy frm = new frmThemDaiLy();
            frm.XuLyThemDaiLy += frmDaiLy_Load;
            frm.ShowDialog();
        }


        private void FormLoad()
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            DAL.QLDaiLyEntities dbContext = new DAL.QLDaiLyEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.DaiLies.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                //daiLiesBindingSource.DataSource = dbContext.DaiLies.Local.ToBindingList();

                dgvDaiLy.DataSource = dbContext.DaiLies.Where(dl => dl.TinhTrang == 1).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            // Make the grid read-only.
            gridViewDaiLy.OptionsBehavior.Editable = false;
            // Prevent the focused cell from being highlighted.
            gridViewDaiLy.OptionsSelection.EnableAppearanceFocusedCell = false;
            // Draw a dotted focus rectangle around the entire row.
            gridViewDaiLy.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.RowFocus;
        }


        private List<int> st = new List<int> { 5, 10, 15, 20 };
        private void frmDaiLy_Load(object sender, EventArgs e)
        {
            BUS_DaiLy dl = new BUS_DaiLy();
            this.FormLoad();
            cbSoLuongSP.DataSource = st;
            int t = dl.SoLuongTrang(int.Parse(cbSoLuongSP.Text));
            cbTrang.DataSource = dl.DStrang(t);
            lbtrang.Text = "Trang " + cbTrang.Text + "/" + t.ToString();
            dgvDaiLy.DataSource = dl.DSdaili(int.Parse(cbTrang.Text), int.Parse(cbSoLuongSP.Text));
            if (int.Parse(cbTrang.Text) == 1)
            {
                btnlui.Enabled = false;
            }
            else
            {
                btnlui.Enabled = true;
            }
            if (int.Parse(cbTrang.Text) == t)
            {
                btntien.Enabled = false;
            }
            else
            {
                btntien.Enabled = true;
            }
        }


        private void txtTuKhoa_TextChanged(object sender, EventArgs e)
        {
            var tukhoa = txtTuKhoa.Text;
            var query = db.DaiLies
                          .Where(dl => dl.TenDaiLy.ToLower().Contains(tukhoa.ToLower()) && dl.TinhTrang == 1)
                          .ToList();

            //daiLiesBindingSource.DataSource = query;
            dgvDaiLy.DataSource = query;

            if (string.IsNullOrEmpty(txtTuKhoa.Text))
            {
                //daiLiesBindingSource.DataSource = db.DaiLies.Where(dl => dl.TinhTrang == 1).ToList();
                dgvDaiLy.DataSource = db.DaiLies.Where(dl => dl.TinhTrang == 1).ToList();
            }
        }


        private void navbarSua_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            //  https://stackoverflow.com/questions/12762617/how-to-get-the-selected-row-values-of-devexpress-xtragrid

            frmSuaDaiLy frm = new frmSuaDaiLy();
            frm.txtMaDaiLy.Text = gridViewDaiLy.GetFocusedRowCellValue("MaDaiLy").ToString();
            frm.dtpNgayTiepNhan.EditValue = gridViewDaiLy.GetFocusedRowCellValue("NgayTiepNhan").ToString();
            frm.txtTenDaiLy.Text = gridViewDaiLy.GetFocusedRowCellValue("TenDaiLy").ToString();
            frm.cbLoaiDL.EditValue = gridViewDaiLy.GetFocusedRowCellValue("Loai").ToString();
            frm.cbQuan.EditValue = gridViewDaiLy.GetFocusedRowCellValue("Quan").ToString();
            frm.txtDiaChi.Text = gridViewDaiLy.GetFocusedRowCellValue("DiaChi").ToString();
            frm.txtEmail.Text = gridViewDaiLy.GetFocusedRowCellValue("Email").ToString();
            frm.XuLySuaDaiLy += frmDaiLy_Load;
            frm.ShowDialog();
        }


        private void navbarXoa_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            var flag = MessageBox.Show(string.Format("Bạn có chắc chắn muốn ngừng kinh doanh đại lý {0} ?", gridViewDaiLy.GetFocusedRowCellValue("TenDaiLy").ToString()), "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (flag == DialogResult.Yes)
            {
                BUS_DaiLy dl = new BUS_DaiLy();
                int madl = int.Parse(gridViewDaiLy.GetFocusedRowCellValue("MaDaiLy").ToString());
                string tendl = gridViewDaiLy.GetFocusedRowCellValue("TenDaiLy").ToString();
                string tenquan = gridViewDaiLy.GetFocusedRowCellValue("Quan").ToString();
                var tb = dl.XoaDaiLy(madl, tenquan);

                if (tb == true)
                {
                    MessageBox.Show(string.Format("Bạn đã ngừng kinh doanh đại lý <{0}> thành công.", tendl), "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.FormLoad();
                }
            }
            else
            {
                return;
            }
        }


        private void btnlui_Click(object sender, EventArgs e)
        {
            BUS_DaiLy dl = new BUS_DaiLy();
            cbTrang.Text = cbTrang.Text = (int.Parse(cbTrang.Text) - 1).ToString(); ;
            dgvDaiLy.DataSource = dl.DSdaili(int.Parse(cbTrang.Text), int.Parse(cbSoLuongSP.Text));
        }


        private void btntien_Click(object sender, EventArgs e)
        {
            BUS_DaiLy dl = new BUS_DaiLy();
            cbTrang.Text = (int.Parse(cbTrang.Text) + 1).ToString();
            dgvDaiLy.DataSource = dl.DSdaili(int.Parse(cbTrang.Text), int.Parse(cbSoLuongSP.Text));
        }


        private void cbSoLuongSP_SelectedIndexChanged(object sender, EventArgs e)
        {
            BUS_DaiLy dl = new BUS_DaiLy();
            int t = dl.SoLuongTrang(int.Parse(cbSoLuongSP.Text));
            cbTrang.DataSource = dl.DStrang(t);
            if (int.Parse(cbTrang.Text) == 1)
            {
                btnlui.Enabled = false;
            }
            else
                btnlui.Enabled = true;
            if (int.Parse(cbTrang.Text) == t)
            {
                btntien.Enabled = false;
            }
            else
                btntien.Enabled = true;
            dgvDaiLy.DataSource = dl.DSdaili(int.Parse(cbTrang.Text), int.Parse(cbSoLuongSP.Text));
        }


        private void cbTrang_SelectedIndexChanged(object sender, EventArgs e)
        {
            BUS_DaiLy dl = new BUS_DaiLy();
            int t = dl.SoLuongTrang(int.Parse(cbSoLuongSP.Text));
            if (int.Parse(cbTrang.Text) == 1)
            {
                btnlui.Enabled = false;
            }
            else
                btnlui.Enabled = true;
            if (int.Parse(cbTrang.Text) == t)
            {
                btntien.Enabled = false;
            }
            else
                btntien.Enabled = true;
            lbtrang.Text = "Trang " + cbTrang.Text + "/" + t.ToString();
            dgvDaiLy.DataSource = dl.DSdaili(int.Parse(cbTrang.Text), int.Parse(cbSoLuongSP.Text));
        }


        private void navBarSoDaiLyToiDa_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            frmSoDaiLyToiDa frm = new frmSoDaiLyToiDa();
            frm.ShowDialog();
        }


        private void navBarUndo_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            frmDLNgungKinhDoanh frm = new frmDLNgungKinhDoanh();
            frm.XuLyKinhDoanhLaiDaiLy += frmDaiLy_Load;
            frm.ShowDialog();
        }


        struct Data
        {
            public List<DAL.DaiLy> DaiLi;
            public string FileName { get; set; }
        }
        Data DSDaiLi;
        /// <summary>
        /// Xuất danh sách đại lý dưới định dạng Excel
        /// </summary>
        /// <param name="sender"></param>
        /// <param name="e"></param>
        private void navBarXuatDSExcel_LinkClicked(object sender, DevExpress.XtraNavBar.NavBarLinkEventArgs e)
        {
            var dl = new BUS_DaiLy();
            var flag = MessageBox.Show("Bạn muốn xuất danh sách đại lý dưới định dạng Excel ?", "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Question);
            if (flag == DialogResult.Yes)
            {
                progressBar1.Visible = true;
                label1.Visible = true;
                if (backgroundWorker1.IsBusy)
                    return;
                using (SaveFileDialog sf = new SaveFileDialog() { Filter = "Excel workbook|*.xls" })
                {
                    if (sf.ShowDialog() == DialogResult.OK)
                    {
                        DSDaiLi.FileName = sf.FileName;
                        DSDaiLi.DaiLi = dl.DanhSachDaiLy();
                        progressBar1.Minimum = 0;
                        progressBar1.Value = 0;
                        backgroundWorker1.RunWorkerAsync(DSDaiLi);
                    }
                };
            }
            else
            {
                return;
            }
        }
        

        private void backgroundWorker1_DoWork_1(object sender, DoWorkEventArgs e)
        {
            List<DAL.DaiLy> ds = ((Data)e.Argument).DaiLi;
            string filename = ((Data)e.Argument).FileName;
            Microsoft.Office.Interop.Excel.Application excel = new Microsoft.Office.Interop.Excel.Application();
            Workbook wb = excel.Workbooks.Add(XlSheetType.xlWorksheet);
            Worksheet ws = (Worksheet)excel.ActiveSheet;
            excel.Visible = false;
            int index = 1;
            int process = ds.Count();
            ws.Cells[1, 1] = "Mã Đại Lí";
            ws.Cells[1, 2] = "Tên Đại Lí";
            ws.Cells[1, 3] = "Quận";
            ws.Cells[1, 4] = "Địa Chỉ";
            ws.Cells[1, 5] = "Email";
            ws.Cells[1, 6] = "Ngày Tiếp Nhận";
            ws.Cells[1, 7] = "Tiền Nợ";
            foreach (DAL.DaiLy dl in ds)
            {
                if (!backgroundWorker1.CancellationPending)
                {
                    backgroundWorker1.ReportProgress(index++ * 100 / process);
                    ws.Cells[index, 1] = dl.MaDaiLy.ToString();
                    ws.Cells[index, 2] = dl.TenDaiLy.ToString();
                    ws.Cells[index, 3] = dl.Quan.ToString();
                    ws.Cells[index, 4] = dl.DiaChi.ToString();
                    ws.Cells[index, 5] = dl.Email.ToString();
                    ws.Cells[index, 6] = (DateTime)dl.NgayTiepNhan;
                    ws.Cells[index, 7] = dl.TienNo.ToString();
                }
            }
            ws.SaveAs(filename, XlFileFormat.xlWorkbookDefault, Type.Missing, true, false, XlSaveAsAccessMode.xlNoChange, XlSaveConflictResolution.xlLocalSessionChanges, Type.Missing, Type.Missing);
            excel.Quit();
        }

        private void backgroundWorker1_ProgressChanged_1(object sender, ProgressChangedEventArgs e)
        {
            progressBar1.Value = e.ProgressPercentage;
            label1.Text = string.Format("Processing ... {0}", e.ProgressPercentage);
            progressBar1.Update();
        }

        private void backgroundWorker1_RunWorkerCompleted_1(object sender, RunWorkerCompletedEventArgs e)
        {
            if (e.Error == null)
            {
                Thread.Sleep(100);
                label1.Text = "Successful!";
            }
        }

        private void label1_TextChanged(object sender, EventArgs e)
        {
            if(label1.Text == "Successful!")
            {
                var tb = MessageBox.Show("Xuất file thành công!", "Thông Báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                if(tb == DialogResult.OK)
                {
                    progressBar1.Visible = false;
                    label1.Visible = false;
                }
            }
        }
    }
}