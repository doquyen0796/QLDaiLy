using System;
using System.Collections.Generic;
using System.ComponentModel;
using System.Data;
using System.Drawing;
using System.Text;
using System.Linq;
using System.Threading.Tasks;
using System.Windows.Forms;
using DevExpress.XtraEditors;
using System.Data.Entity;
using BUS;

namespace QLDaiLy
{
    public partial class frmHHNgungKinhDoanh : DevExpress.XtraEditors.XtraForm
    {
        public event EventHandler XuLyKinhDoanhLaiHangHoa;

        private void KhiKinhDoanhLaiHangHoa(EventArgs e)
        {
            var handler = XuLyKinhDoanhLaiHangHoa;
            if (handler != null)
            {
                handler(this, e);
            }
        }


        DAL.QLDaiLyEntities db = new DAL.QLDaiLyEntities();


        public frmHHNgungKinhDoanh()
        {
            InitializeComponent();
        }


        private void FormLoad()
        {
            // This line of code is generated by Data Source Configuration Wizard
            // Instantiate a new DBContext
            DAL.QLDaiLyEntities dbContext = new DAL.QLDaiLyEntities();
            // Call the LoadAsync method to asynchronously get the data for the given DbSet from the database.
            dbContext.HangHoas.LoadAsync().ContinueWith(loadTask =>
            {
                // Bind data to control when loading complete
                //hangHoasBindingSource.DataSource = dbContext.HangHoas.Local.ToBindingList();
                hangHoasBindingSource.DataSource = dbContext.HangHoas.Where(h => h.TinhTrang == 0).ToList();
            }, System.Threading.Tasks.TaskScheduler.FromCurrentSynchronizationContext());


            // Prevent the focused cell from being highlighted.
            gridViewHHNgungKD.OptionsSelection.EnableAppearanceFocusedCell = false;
            // Draw a dotted focus rectangle around the entire row.
            gridViewHHNgungKD.FocusRectStyle = DevExpress.XtraGrid.Views.Grid.DrawFocusRectStyle.RowFocus;
        }


        private void frmHHNgungKinhDoanh_Load(object sender, EventArgs e)
        {
            this.FormLoad();
        }


        private void btnKinhDoanh_ButtonClick(object sender, DevExpress.XtraEditors.Controls.ButtonPressedEventArgs e)
        {
            int mahh = int.Parse(gridViewHHNgungKD.GetFocusedRowCellValue("MaHangHoa").ToString());
            string tenhh = gridViewHHNgungKD.GetFocusedRowCellValue("TenHangHoa").ToString();

            var tb = MessageBox.Show(string.Format("Bạn có chắc chắn muốn tiếp tục kinh doanh hàng hóa <{0}> ?", tenhh), "Thông báo", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
            if (tb == DialogResult.Yes)
            {
                BUS_HangHoa hanghoa = new BUS_HangHoa();
                var flag = hanghoa.TiepTucKinhDoanh(mahh);
                if (flag == true)
                {
                    MessageBox.Show(string.Format("Bạn đã tiếp tục kinh doanh hàng hóa <{0}> thành công.", tenhh), "Thông báo", MessageBoxButtons.OK, MessageBoxIcon.Information);
                    this.FormLoad();
                    KhiKinhDoanhLaiHangHoa(EventArgs.Empty);   //  https://msdn.microsoft.com/en-us/library/9aackb16(v=vs.110).aspx
                }
            }
            else
            {
                return;
            }
        }


        private void txtTuKhoa_TextChanged(object sender, EventArgs e)
        {
            var tukhoa = txtTuKhoa.Text;
            var query = db.HangHoas
                          .Where(hh => hh.TenHangHoa.ToLower().Contains(tukhoa.ToLower()) && hh.TinhTrang == 0)
                          .ToList();

            hangHoasBindingSource.DataSource = query;

            if (string.IsNullOrEmpty(txtTuKhoa.Text))
            {
                hangHoasBindingSource.DataSource = db.HangHoas.Where(hh => hh.TinhTrang == 0).ToList();
            }
        }
    }
}